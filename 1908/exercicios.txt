EX1: Construa um algortimo que inverta um vetor de N posições, sem usar vetor auxiliar. (N)

inverte_vetor(*vetor, n): vetor {

	for (i=0; i < n/2;i++) {
		aux = vetor[i]
		vetor[i] = vetor[n-i]
		vetor[n-i] = aux
	}
}

EX2: Avalie um algortimo que soma ,matriz A e B em uma matriz C. (N²)

soma_matrizes (matriz1, matriz2, n) {

	matriz[n][n] = novaMatriz;
	for(i=0;i < n;i++) {
		for(j=0;j < n;j++) {
			novaMatriz[i][j] = matriz1[i][j] + matriz2[i][j]						
		}
	}
}

EX3: Avalie um algortimo que multiplica matriz A e B em uma matriz C. (N³)

mulyiplica_matrizes (matriz1, matriz2, n) {

	for(i=0;i < n;i++) {
		for(j=0;j < n;j++) {
			novaMatriz[i][j] = 0
			for(k=0;k < n;k++) {
				novaMatriz[i][j] = novaMatriz[i][j] + (matriz1[i][k] * matriz2[k][j]) 
			}				
		}
	}
}

EX4: Considere a existência de duas listas encadeadas, L1 e L2.  
Avalie a complexidade para o pior caso que percorre a lista L1 e imprime a informação de cada nó, desde que essa
informação esteja em algum no de L2.


